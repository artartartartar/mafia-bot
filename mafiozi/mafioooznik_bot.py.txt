# -*- coding: utf-8 -*-
import asyncio
import logging
import random
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

# üîë –ù–ê–°–¢–†–û–ô–ö–ò
BOT_TOKEN = "8276213136:AAGDPFrlROAdLsw2Bvxp9DteWHT2Pn2R0os"
CHANNEL_ID = "@mafiooooznik"  # ‚¨ÖÔ∏è –¢–í–û–ô –ö–ê–ù–ê–õ

# üéÆ –°–û–ó–î–ê–ï–ú –ë–û–¢–ê
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# üéØ –•–†–ê–ù–ò–õ–ò–©–ï –î–ê–ù–ù–´–•
waiting_players = {}
active_game = None
player_votes = {}
night_actions = {}

# üéØ –°–û–°–¢–û–Ø–ù–ò–Ø –î–õ–Ø –ù–û–ß–ù–´–• –î–ï–ô–°–¢–í–ò–ô
class NightActions(StatesGroup):
    waiting_mafia = State()
    waiting_doctor = State()
    waiting_sheriff = State()

# üéØ –ö–õ–ê–°–° –ò–ì–†–´
class MafiaGame:
    def __init__(self):
        self.players = {}  # {user_id: {"name": "", "role": "", "alive": True}}
        self.phase = "night"  # night –∏–ª–∏ day
        self.day_number = 1
        self.mafia_target = None
        self.doctor_target = None
        self.sheriff_check = None
        self.votes = {}
        self.players_ready = set()
    
    def assign_roles(self, players_count):
        roles = []
        
        if players_count == 4:
            roles = ["mafia", "sheriff", "doctor", "civilian"]
        elif players_count == 5:
            roles = ["mafia", "sheriff", "doctor", "civilian", "civilian"]
        elif players_count == 6:
            roles = ["mafia", "mafia", "sheriff", "doctor", "civilian", "civilian"]
        elif players_count == 7:
            roles = ["mafia", "mafia", "sheriff", "doctor", "civilian", "civilian", "civilian"]
        elif players_count >= 8:
            mafia_count = players_count // 3
            roles = ["mafia"] * mafia_count + ["sheriff", "doctor"] + ["civilian"] * (players_count - mafia_count - 2)
            if len(roles) > players_count:
                roles = roles[:players_count]
        
        random.shuffle(roles)
        return roles
    
    async def send_roles(self):
        for user_id, player_info in self.players.items():
            role = player_info["role"]
            role_text = self.get_role_description(role)
            
            try:
                await bot.send_message(
                    user_id,
                    f"üé≠ –¢–í–û–Ø –†–û–õ–¨: {role_text}\n\n"
                    f"–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –°–ª–µ–¥–∏—Ç–µ –∑–∞ –∫–∞–Ω–∞–ª–æ–º {CHANNEL_ID}"
                )
            except:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É {player_info['name']}")
    
    def get_role_description(self, role):
        descriptions = {
            "mafia": "üî´ –ú–ê–§–ò–Ø\n–¢—ã –¥–æ–ª–∂–µ–Ω —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –≤—Å–µ—Ö –º–∏—Ä–Ω—ã—Ö –∂–∏—Ç–µ–ª–µ–π! –ù–æ—á—å—é –≤—ã–±–∏—Ä–∞–π –∂–µ—Ä—Ç–≤—É.",
            "sheriff": "üëÆ –®–ï–†–ò–§\n–¢—ã –¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ –º–∞—Ñ–∏—é! –ù–æ—á—å—é –ø—Ä–æ–≤–µ—Ä—è–π –∏–≥—Ä–æ–∫–æ–≤.",
            "doctor": "üíâ –î–û–ö–¢–û–†\n–¢—ã –º–æ–∂–µ—à—å —Å–ø–∞—Å—Ç–∏ –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∑–∞ –Ω–æ—á—å!",
            "civilian": "üë®‚Äçüåæ –ú–ò–†–ù–´–ô –ñ–ò–¢–ï–õ–¨\n–ù–∞–π–¥–∏ –º–∞—Ñ–∏—é –∏ –ø—Ä–æ–≥–æ–ª–æ—Å—É–π –ø—Ä–æ—Ç–∏–≤ –Ω–∏—Ö!"
        }
        return descriptions.get(role, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å")
    
    def get_alive_players(self):
        return [user_id for user_id, info in self.players.items() if info["alive"]]
    
    def get_alive_players_info(self):
        return {user_id: info for user_id, info in self.players.items() if info["alive"]}
    
    def check_win_condition(self):
        alive_players = self.get_alive_players_info()
        mafia_count = sum(1 for info in alive_players.values() if info["role"] == "mafia")
        civilian_count = len(alive_players) - mafia_count
        
        if mafia_count == 0:
            return "civilians"
        elif mafia_count >= civilian_count:
            return "mafia"
        return None
    
    async def start_night(self):
        self.phase = "night"
        self.players_ready.clear()
        night_actions.clear()
        
        # –û–ø–æ–≤–µ—â–∞–µ–º –≤ –∫–∞–Ω–∞–ª–µ
        await bot.send_message(
            CHANNEL_ID,
            f"üåô –ù–û–ß–¨ {self.day_number}\n\n"
            f"–ì–æ—Ä–æ–¥ –∑–∞—Å—ã–ø–∞–µ—Ç...\n"
            f"–ü—Ä–æ—Å—ã–ø–∞–µ—Ç—Å—è –º–∞—Ñ–∏—è...\n"
            f"–î–æ–∫—Ç–æ—Ä –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ —Ä–∞–±–æ—Ç–µ...\n"
            f"–®–µ—Ä–∏—Ñ –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ...\n\n"
            f"–£ –∏–≥—Ä–æ–∫–æ–≤ –µ—Å—Ç—å 2 –º–∏–Ω—É—Ç—ã –Ω–∞ –Ω–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è!"
        )
        
        # –†–∞—Å—Å—ã–ª–∞–µ–º –Ω–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        for user_id, player_info in self.get_alive_players_info().items():
            role = player_info["role"]
            
            if role == "mafia":
                await self.send_mafia_action(user_id)
            elif role == "doctor":
                await self.send_doctor_action(user_id)
            elif role == "sheriff":
                await self.send_sheriff_action(user_id)
    
    async def send_mafia_action(self, user_id):
        alive_players = self.get_alive_players_info()
        targets = {uid: info for uid, info in alive_players.items() if info["role"] != "mafia"}
        
        if not targets:
            return
            
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=info["name"], callback_data=f"mafia_kill:{uid}")]
            for uid, info in targets.items()
        ])
        
        try:
            await bot.send_message(
                user_id,
                "üî´ –ú–ê–§–ò–Ø, –ü–†–û–°–´–ü–ê–ô–¢–ï–°–¨!\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è:",
                reply_markup=keyboard
            )
        except:
            pass
    
    async def send_doctor_action(self, user_id):
        alive_players = self.get_alive_players_info()
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=info["name"], callback_data=f"doctor_heal:{uid}")]
            for uid, info in alive_players.items()
        ])
        
        try:
            await bot.send_message(
                user_id,
                "üíâ –î–û–ö–¢–û–†, –ü–†–û–°–´–ü–ê–ô–¢–ï–°–¨!\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ª–µ—á–µ–Ω–∏—è:",
                reply_markup=keyboard
            )
        except:
            pass
    
    async def send_sheriff_action(self, user_id):
        alive_players = self.get_alive_players_info()
        targets = {uid: info for uid, info in alive_players.items() if uid != user_id}
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=info["name"], callback_data=f"sheriff_check:{uid}")]
            for uid, info in targets.items()
        ])
        
        try:
            await bot.send_message(
                user_id,
                "üëÆ –®–ï–†–ò–§, –ü–†–û–°–´–ü–ê–ô–°–Ø!\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:",
                reply_markup=keyboard
            )
        except:
            pass
    
    async def process_night_actions(self):
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è
        mafia_votes = {}
        doctor_votes = {}
        sheriff_votes = {}
        
        for action in night_actions.values():
            action_type, target_id = action
            if action_type == "mafia_kill":
                mafia_votes[target_id] = mafia_votes.get(target_id, 0) + 1
            elif action_type == "doctor_heal":
                doctor_votes[target_id] = doctor_votes.get(target_id, 0) + 1
            elif action_type == "sheriff_check":
                sheriff_votes[target_id] = sheriff_votes.get(target_id, 0) + 1
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–∏
        self.mafia_target = max(mafia_votes.items(), key=lambda x: x[1])[0] if mafia_votes else None
        self.doctor_target = max(doctor_votes.items(), key=lambda x: x[1])[0] if doctor_votes else None
        self.sheriff_check = max(sheriff_votes.items(), key=lambda x: x[1])[0] if sheriff_votes else None
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è
        killed_player = None
        if self.mafia_target and self.mafia_target != self.doctor_target:
            self.players[self.mafia_target]["alive"] = False
            killed_player = self.players[self.mafia_target]["name"]
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —à–µ—Ä–∏—Ñ–∞
        sheriff_result = None
        if self.sheriff_check:
            checked_role = self.players[self.sheriff_check]["role"]
            sheriff_result = "–º–∞—Ñ–∏—è" if checked_role == "mafia" else "–º–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å"
        
        # –û–ø–æ–≤–µ—â–∞–µ–º –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –Ω–æ—á–∏
        night_result = f"üåô –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ù–û–ß–ò {self.day_number}:\n\n"
        
        if killed_player:
            night_result += f"‚ò†Ô∏è –ñ–µ—Ä—Ç–≤–∞ –º–∞—Ñ–∏–∏: {killed_player}\n"
        else:
            night_result += "‚úÖ –≠—Ç–æ–π –Ω–æ—á—å—é –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–≥–∏–±\n"
        
        # –°–æ–æ–±—â–∞–µ–º —à–µ—Ä–∏—Ñ—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
        sheriff_user_id = next((uid for uid, info in self.players.items() if info["role"] == "sheriff" and info["alive"]), None)
        if sheriff_user_id and sheriff_result:
            try:
                checked_name = self.players[self.sheriff_check]["name"]
                await bot.send_message(
                    sheriff_user_id,
                    f"üëÆ –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–†–û–í–ï–†–ö–ò:\n\n"
                    f"–ò–≥—Ä–æ–∫ {checked_name} - {sheriff_result}"
                )
            except:
                pass
        
        await bot.send_message(CHANNEL_ID, night_result)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –ø–æ–±–µ–¥—ã
        winner = self.check_win_condition()
        if winner:
            await self.end_game(winner)
            return False
        
        return True
    
    async def start_day(self):
        self.phase = "day"
        self.votes.clear()
        
        alive_players = self.get_alive_players_info()
        player_list = "\n".join([f"‚Ä¢ {info['name']}" for info in alive_players.values()])
        
        await bot.send_message(
            CHANNEL_ID,
            f"‚òÄÔ∏è –î–ï–ù–¨ {self.day_number}\n\n"
            f"–ì–æ—Ä–æ–¥ –ø—Ä–æ—Å—ã–ø–∞–µ—Ç—Å—è...\n\n"
            f"üéØ –ñ–∏–≤—ã–µ –∏–≥—Ä–æ–∫–∏ ({len(alive_players)}):\n{player_list}\n\n"
            f"–û–±—Å—É–∂–¥–∞–π—Ç–µ –∏ –≥–æ–ª–æ—Å—É–π—Ç–µ! –£ –≤–∞—Å 3 –º–∏–Ω—É—Ç—ã.\n"
            f"–î–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /vote @username"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤—Å–µ–º –∂–∏–≤—ã–º –∏–≥—Ä–æ–∫–∞–º
        for user_id in alive_players.keys():
            await self.send_voting_keyboard(user_id)
    
    async def send_voting_keyboard(self, user_id):
        alive_players = self.get_alive_players_info()
        targets = {uid: info for uid, info in alive_players.items() if uid != user_id}
        
        if not targets:
            return
            
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=info["name"], callback_data=f"vote:{uid}")]
            for uid, info in targets.items()
        ])
        
        try:
            await bot.send_message(
                user_id,
                "üó≥Ô∏è –ì–û–õ–û–°–û–í–ê–ù–ò–ï\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –∏–∑–≥–Ω–∞–Ω–∏—è:",
                reply_markup=keyboard
            )
        except:
            pass
    
    async def process_voting(self):
        if not self.votes:
            await bot.send_message(CHANNEL_ID, "‚ùå –ù–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª!")
            return True
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–∞
        vote_count = {}
        for target_id in self.votes.values():
            vote_count[target_id] = vote_count.get(target_id, 0) + 1
        
        # –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä–æ–∫–∞ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤
        max_votes = max(vote_count.values())
        candidates = [target_id for target_id, votes in vote_count.items() if votes == max_votes]
        
        if len(candidates) > 1:
            await bot.send_message(CHANNEL_ID, "ü§ù –ù–∏—á—å—è! –ù–∏–∫—Ç–æ –Ω–µ –∏–∑–≥–Ω–∞–Ω.")
            return True
        
        exiled_id = candidates[0]
        exiled_player = self.players[exiled_id]
        exiled_player["alive"] = False
        
        role_text = {
            "mafia": "üî´ –ú–ê–§–ò–Ø",
            "sheriff": "üëÆ –®–ï–†–ò–§", 
            "doctor": "üíâ –î–û–ö–¢–û–†",
            "civilian": "üë®‚Äçüåæ –ú–ò–†–ù–´–ô –ñ–ò–¢–ï–õ–¨"
        }
        
        await bot.send_message(
            CHANNEL_ID,
            f"‚öñÔ∏è –†–ï–ó–£–õ–¨–¢–ê–¢ –ì–û–õ–û–°–û–í–ê–ù–ò–Ø:\n\n"
            f"–ò–∑–≥–Ω–∞–Ω: {exiled_player['name']}\n"
            f"–†–æ–ª—å: {role_text[exiled_player['role']]}"
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –ø–æ–±–µ–¥—ã
        winner = self.check_win_condition()
        if winner:
            await self.end_game(winner)
            return False
        
        return True
    
    async def end_game(self, winner):
        role_text = {
            "mafia": "üî´ –ú–ê–§–ò–Ø",
            "sheriff": "üëÆ –®–ï–†–ò–§",
            "doctor": "üíâ –î–û–ö–¢–û–†", 
            "civilian": "üë®‚Äçüåæ –ú–ò–†–ù–´–ô –ñ–ò–¢–ï–õ–¨"
        }
        
        winner_text = "üî´ –ü–û–ë–ï–î–ê –ú–ê–§–ò–ò!" if winner == "mafia" else "üéâ –ü–û–ë–ï–î–ê –ú–ò–†–ù–´–• –ñ–ò–¢–ï–õ–ï–ô!"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –∏ –∏—Ö —Ä–æ–ª–µ–π
        players_info = "\n".join([
            f"‚Ä¢ {info['name']} - {role_text[info['role']]} {'‚ò†Ô∏è' if not info['alive'] else '‚úÖ'}"
            for info in self.players.values()
        ])
        
        await bot.send_message(
            CHANNEL_ID,
            f"üéÆ –ò–ì–†–ê –û–ö–û–ù–ß–ï–ù–ê!\n\n"
            f"{winner_text}\n\n"
            f"üìä –ò–¢–û–ì–ò:\n{players_info}\n\n"
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! üéâ\n"
            f"–î–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã –Ω–∞–ø–∏—à–∏—Ç–µ /start"
        )
        
        global active_game
        active_game = None

# üéØ –ö–û–ú–ê–ù–î–ê /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéÆ –ü–†–ò–°–û–ï–î–ò–ù–ò–¢–¨–°–Ø –ö –ò–ì–†–ï", callback_data="join_game")],
        [InlineKeyboardButton(text="üìñ –ü–†–ê–í–ò–õ–ê –ò–ì–†–´", callback_data="show_rules")],
        [InlineKeyboardButton(text="üë• –ò–ì–†–û–ö–ò –í –õ–û–ë–ë–ò", callback_data="show_players")],
        [InlineKeyboardButton(text="üì¢ –ü–ï–†–ï–ô–¢–ò –í –ö–ê–ù–ê–õ", url=f"https://t.me/{CHANNEL_ID[1:]}")]
    ])
    
    await message.answer(
        "üéÆ –î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í –ú–ê–§–ò–Æ!\n\n"
        "–Ø –±—É–¥—É —Ç–≤–æ–∏–º –≤–µ–¥—É—â–∏–º –≤ —ç—Ç–æ–π –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–π –∏–≥—Ä–µ!\n"
        "–í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

# üéØ –ü–†–ò–°–û–ï–î–ò–ù–ï–ù–ò–ï –ö –ò–ì–†–ï
@dp.callback_query(F.data == "join_game")
async def join_game(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = callback.from_user.first_name
    
    waiting_players[user_id] = user_name
    players_count = len(waiting_players)
    
    await callback.answer(f"–¢—ã –≤ –∏–≥—Ä–µ, {user_name}! üéâ")
    await callback.message.edit_text(
        f"‚úÖ –¢–´ –í –ò–ì–†–ï!\n\n"
        f"üë• –ò–≥—Ä–æ–∫–æ–≤ –≤ –ª–æ–±–±–∏: {players_count}\n"
        f"üéØ –ù—É–∂–Ω–æ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞: 4 –∏–≥—Ä–æ–∫–∞\n\n"
        f"–ñ–¥–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö... ‚è≥\n\n"
        f"–ê–¥–º–∏–Ω –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É: /start_game"
    )

# üéØ –ó–ê–ü–£–°–ö –ò–ì–†–´
@dp.message(Command("start_game"))
async def start_game_command(message: types.Message):
    global active_game
    
    if active_game:
        await message.answer("‚ùå –ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç! –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è.")
        return
        
    if len(waiting_players) < 4:
        await message.answer(f"‚ùå –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 4 –∏–≥—Ä–æ–∫–∞. –°–µ–π—á–∞—Å: {len(waiting_players)}")
        return
    
    # –°–û–ó–î–ê–ï–ú –ù–û–í–£–Æ –ò–ì–†–£
    active_game = MafiaGame()
    
    # –î–û–ë–ê–í–õ–Ø–ï–ú –ò–ì–†–û–ö–û–í –í –ò–ì–†–£
    player_list = []
    for user_id, user_name in waiting_players.items():
        active_game.players[user_id] = {
            "name": user_name,
            "role": "",
            "alive": True
        }
        player_list.append(f"‚Ä¢ {user_name}")
    
    # –†–ê–°–ü–†–ï–î–ï–õ–Ø–ï–ú –†–û–õ–ò
    roles = active_game.assign_roles(len(waiting_players))
    user_ids = list(active_game.players.keys())
    
    for i, user_id in enumerate(user_ids):
        if i < len(roles):
            active_game.players[user_id]["role"] = roles[i]
    
    # –û–¢–ü–†–ê–í–õ–Ø–ï–ú –†–û–õ–ò –ò–ì–†–û–ö–ê–ú
    await active_game.send_roles()
    
    # –û–ü–û–í–ï–©–ê–ï–ú –í –ö–ê–ù–ê–õ–ï
    try:
        await bot.send_message(
            CHANNEL_ID,
            f"üéÆ –ò–ì–†–ê –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø!\n\n"
            f"–£—á–∞—Å—Ç–Ω–∏–∫–∏ ({len(waiting_players)} –∏–≥—Ä–æ–∫–æ–≤):\n" + "\n".join(player_list) +
            f"\n\nüåô –ù–û–ß–¨ {active_game.day_number}\n"
            f"–ì–æ—Ä–æ–¥ –∑–∞—Å—ã–ø–∞–µ—Ç... –ü—Ä–æ—Å—ã–ø–∞–µ—Ç—Å—è –º–∞—Ñ–∏—è!"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª: {e}")
    
    # –û–ß–ò–©–ê–ï–ú –õ–û–ë–ë–ò
    waiting_players.clear()
    
    # –ó–ê–ü–£–°–ö–ê–ï–ú –ù–û–ß–¨
    asyncio.create_task(run_night_phase())
    
    await message.answer(
        f"üéÆ –ò–ì–†–ê –ó–ê–ü–£–©–ï–ù–ê!\n\n"
        f"–£—á–∞—Å—Ç–Ω–∏–∫–∏: {len(active_game.players)} –∏–≥—Ä–æ–∫–æ–≤\n"
        f"–†–æ–ª–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã! –ò–≥—Ä–æ–∫–∏ –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–∏ —Ä–æ–ª–∏ –≤ –õ–°.\n\n"
        f"–°–ª–µ–¥–∏—Ç–µ –∑–∞ –∏–≥—Ä–æ–π –≤ –∫–∞–Ω–∞–ª–µ!"
    )

# üéØ –ù–û–ß–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø
@dp.callback_query(F.data.startswith("mafia_kill:"))
async def mafia_kill(callback: types.CallbackQuery):
    if not active_game or active_game.phase != "night":
        await callback.answer("‚ùå –°–µ–π—á–∞—Å –Ω–µ –Ω–æ—á—å!", show_alert=True)
        return
    
    target_id = int(callback.data.split(":")[1])
    player_info = active_game.players.get(callback.from_user.id)
    
    if not player_info or player_info["role"] != "mafia" or not player_info["alive"]:
        await callback.answer("‚ùå –¢—ã –Ω–µ –º–∞—Ñ–∏—è –∏–ª–∏ –º–µ—Ä—Ç–≤!", show_alert=True)
        return
    
    night_actions[callback.from_user.id] = ("mafia_kill", target_id)
    target_name = active_game.players[target_id]["name"]
    
    await callback.answer(f" –í—ã–±—Ä–∞–Ω–∞ –∂–µ—Ä—Ç–≤–∞: {target_name}", show_alert=False)
    await callback.message.edit_text(f"üî´ –¢—ã –≤—ã–±—Ä–∞–ª –∂–µ—Ä—Ç–≤—É: {target_name}")

@dp.callback_query(F.data.startswith("doctor_heal:"))
async def doctor_heal(callback: types.CallbackQuery):
    if not active_game or active_game.phase != "night":
        await callback.answer("‚ùå –°–µ–π—á–∞—Å –Ω–µ –Ω–æ—á—å!", show_alert=True)
        return
    
    target_id = int(callback.data.split(":")[1])
    player_info = active_game.players.get(callback.from_user.id)
    
    if not player_info or player_info["role"] != "doctor" or not player_info["alive"]:
        await callback.answer("‚ùå –¢—ã –Ω–µ –¥–æ–∫—Ç–æ—Ä –∏–ª–∏ –º–µ—Ä—Ç–≤!", show_alert=True)
        return
    
    night_actions[callback.from_user.id] = ("doctor_heal", target_id)
    target_name = active_game.players[target_id]["name"]
    
    await callback.answer(f"üíâ –õ–µ—á–∏—à—å: {target_name}", show_alert=False)
    await callback.message.edit_text(f"üíâ –¢—ã –ª–µ—á–∏—à—å: {target_name}")

@dp.callback_query(F.data.startswith("sheriff_check:"))
async def sheriff_check(callback: types.CallbackQuery):
    if not active_game or active_game.phase != "night":
        await callback.answer("‚ùå –°–µ–π—á–∞—Å –Ω–µ –Ω–æ—á—å!", show_alert=True)
        return
    
    target_id = int(callback.data.split(":")[1])
    player_info = active_game.players.get(callback.from_user.id)
    
    if not player_info or player_info["role"] != "sheriff" or not player_info["alive"]:
        await callback.answer("‚ùå –¢—ã –Ω–µ —à–µ—Ä–∏—Ñ –∏–ª–∏ –º–µ—Ä—Ç–≤!", show_alert=True)
        return
    
    night_actions[callback.from_user.id] = ("sheriff_check", target_id)
    target_name = active_game.players[target_id]["name"]
    
    await callback.answer(f"üëÆ –ü—Ä–æ–≤–µ—Ä—è–µ—à—å: {target_name}", show_alert=False)
    await callback.message.edit_text(f"üëÆ –¢—ã –ø—Ä–æ–≤–µ—Ä—è–µ—à—å: {target_name}")

# üéØ –ì–û–õ–û–°–û–í–ê–ù–ò–ï
@dp.callback_query(F.data.startswith("vote:"))
async def vote_player(callback: types.CallbackQuery):
    if not active_game or active_game.phase != "day":
        await callback.answer("‚ùå –°–µ–π—á–∞—Å –Ω–µ –¥–µ–Ω—å!", show_alert=True)
        return
    
    target_id = int(callback.data.split(":")[1])
    player_info = active_game.players.get(callback.from_user.id)
    
    if not player_info or not player_info["alive"]:
        await callback.answer("‚ùå –¢—ã –º–µ—Ä—Ç–≤ –∏ –Ω–µ –º–æ–∂–µ—à—å –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!", show_alert=True)
        return
    
    if target_id == callback.from_user.id:
        await callback.answer("‚ùå –ù–µ–ª—å–∑—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —Å–µ–±—è!", show_alert=True)
        return
    
    active_game.votes[callback.from_user.id] = target_id
    target_name = active_game.players[target_id]["name"]
    
    await callback.answer(f"üó≥Ô∏è –ì–æ–ª–æ—Å –∑–∞: {target_name}", show_alert=False)
    await callback.message.edit_text(f"üó≥Ô∏è –¢—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –∑–∞: {target_name}")

# üéØ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –§–ê–ó–´
async def run_night_phase():
    await asyncio.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ —Å—Ç–∞—Ä—Ç
    
    if not active_game:
        return
        
    await active_game.start_night()
    await asyncio.sleep(120)  # 2 –º–∏–Ω—É—Ç—ã –Ω–∞ –Ω–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    
    if active_game and active_game.phase == "night":
        continue_game = await active_game.process_night_actions()
        if continue_game:
            await asyncio.sleep(5)
            asyncio.create_task(run_day_phase())

async def run_day_phase():
    if not active_game:
        return
        
    await active_game.start_day()
    await asyncio.sleep(180)  # 3 –º–∏–Ω—É—Ç—ã –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ
    
    if active_game and active_game.phase == "day":
        continue_game = await active_game.process_voting()
        if continue_game:
            active_game.day_number += 1
            await asyncio.sleep(5)
            asyncio.create_task(run_night_phase())

# üéØ –ö–û–ú–ê–ù–î–ê –°–¢–ê–¢–£–°–ê
@dp.message(Command("game_status"))
async def game_status_command(message: types.Message):
    if not active_game:
        await message.answer("‚ùå –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã")
        return
    
    alive_players = active_game.get_alive_players_info()
    mafia_count = sum(1 for info in alive_players.values() if info["role"] == "mafia")
    civilian_count = len(alive_players) - mafia_count
    
    status_text = (
        f"üéÆ –°–¢–ê–¢–£–° –ò–ì–†–´:\n\n"
        f"üìä –§–∞–∑–∞: {'üåô –ù–û–ß–¨' if active_game.phase == 'night' else '‚òÄÔ∏è –î–ï–ù–¨'} {active_game.day_number}\n"
        f"üë• –ñ–∏–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: {len(alive_players)}\n"
        f"üî´ –ú–∞—Ñ–∏—è: {mafia_count}\n"
        f"üë®‚Äçüåæ –ú–∏—Ä–Ω—ã–µ: {civilian_count}\n\n"
        f"üéØ –ñ–∏–≤—ã–µ –∏–≥—Ä–æ–∫–∏:\n" + "\n".join([f"‚Ä¢ {info['name']}" for info in alive_players.values()])
    )
    
    await message.answer(status_text)

# üéØ –ö–û–ì–î–ê –ù–ê–ñ–ò–ú–ê–Æ–¢ "–ü–†–ê–í–ò–õ–ê –ò–ì–†–´"
@dp.callback_query(F.data == "show_rules")
async def show_rules(callback: types.CallbackQuery):
    rules_text = (
        "üìñ –ü–†–ê–í–ò–õ–ê –ú–ê–§–ò–ò:\n\n"
        "üéØ –¶–ï–õ–ò:\n"
        "‚Ä¢ üî´ –ú–ê–§–ò–Ø: —É–±–∏—Ç—å –≤—Å–µ—Ö –º–∏—Ä–Ω—ã—Ö –∂–∏—Ç–µ–ª–µ–π\n"
        "‚Ä¢ üë®‚Äçüåæ –ú–ò–†–ù–´–ï: –Ω–∞–π—Ç–∏ –∏ –∏–∑–≥–Ω–∞—Ç—å –≤—Å—é –º–∞—Ñ–∏—é\n\n"
        "üåô –ù–û–ß–ù–ê–Ø –§–ê–ó–ê:\n"
        "‚Ä¢ –ú–∞—Ñ–∏—è –ø—Ä–æ—Å—ã–ø–∞–µ—Ç—Å—è –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –∂–µ—Ä—Ç–≤—É\n"
        "‚Ä¢ –î–æ–∫—Ç–æ—Ä –ª–µ—á–∏—Ç –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞\n"
        "‚Ä¢ –®–µ—Ä–∏—Ñ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–æ–ª—å –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞\n\n"
        "‚òÄÔ∏è –î–ù–ï–í–ù–ê–Ø –§–ê–ó–ê:\n"
        "‚Ä¢ –í—Å–µ –∏–≥—Ä–æ–∫–∏ –æ–±—Å—É–∂–¥–∞—é—Ç –∏ –≤—ã–¥–≤–∏–≥–∞—é—Ç –≤–µ—Ä—Å–∏–∏\n"
        "‚Ä¢ –ì–æ–ª–æ—Å—É—é—Ç –∑–∞ –∏–∑–≥–Ω–∞–Ω–∏–µ –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º–æ–≥–æ\n"
        "‚Ä¢ –ò–∑–≥–Ω–∞–Ω–Ω—ã–π –∏–≥—Ä–æ–∫ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç —Å–≤–æ—é —Ä–æ–ª—å\n\n"
        "‚öñÔ∏è –£–°–õ–û–í–ò–Ø –ü–û–ë–ï–î–´:\n"
        "‚Ä¢ –ú–∞—Ñ–∏—è –ø–æ–±–µ–∂–¥–∞–µ—Ç, –∫–æ–≥–¥–∞ –∏—Ö —á–∏—Å–ª–æ >= –º–∏—Ä–Ω—ã—Ö\n"
        "‚Ä¢ –ú–∏—Ä–Ω—ã–µ –ø–æ–±–µ–∂–¥–∞—é—Ç, –∫–æ–≥–¥–∞ –≤—Å—è –º–∞—Ñ–∏—è –∏–∑–≥–Ω–∞–Ω–∞\n\n"
        "üë§ –†–û–õ–ò:\n"
        "‚Ä¢ üî´ –ú–ê–§–ò–Ø (1-3): —É–±–∏–≤–∞—é—Ç –Ω–æ—á—å—é, —Å–∫—Ä—ã–≤–∞—é—Ç—Å—è –¥–Ω–µ–º\n"
        "‚Ä¢ üëÆ –®–ï–†–ò–§ (1): –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –Ω–æ—á—å—é\n"
        "‚Ä¢ üíâ –î–û–ö–¢–û–† (1): –ª–µ—á–∏—Ç –∏–≥—Ä–æ–∫–æ–≤ –Ω–æ—á—å—é\n"
        "‚Ä¢ üë®‚Äçüåæ –ú–ò–†–ù–´–ï (2+): –∏—â—É—Ç –º–∞—Ñ–∏—é, –≥–æ–ª–æ—Å—É—é—Ç –¥–Ω–µ–º"
    )
    await callback.answer(rules_text, show_alert=True)

@dp.callback_query(F.data == "show_players")
async def show_players(callback: types.CallbackQuery):
    if not waiting_players:
        players_list = "–ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç üòî"
    else:
        players_list = "\n".join([f"‚Ä¢ {name}" for name in waiting_players.values()])
    
    total_players = len(waiting_players)
    await callback.answer(f"üë• –ò–ì–†–û–ö–ò –í –õ–û–ë–ë–ò:\n\n{players_list}\n\n–í—Å–µ–≥–æ: {total_players}", show_alert=True)

# üöÄ –ó–ê–ü–£–°–ö –ë–û–¢–ê
async def main():
    logging.basicConfig(level=logging.INFO)
    print("üéÆ –ë–æ—Ç –ú–∞—Ñ–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    print(f"üì¢ –ö–∞–Ω–∞–ª: {CHANNEL_ID}")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())